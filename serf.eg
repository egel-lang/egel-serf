#!/usr/local/bin/egel

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import "prelude.eg"
import "os.ego"
import "regex.ego"
import "dictionary.eg"

using System
using List

def main = Serf::start

namespace OS (
    using OS

    def input = let L = read_line stdin in if eof stdin then {} else {L | input}
)

namespace Serf (

    def start =
        if elem "help" args then print "Usage: serf.eg [help] [gopher|www|debug]\n"
        else if elem "gopher" args then serve_gopher_request
        else if elem "www" args then serve_www_request
        else if elem "debug" args then debug
        else start_servers

    def start_gopher_server =
        OS::exec "while true ; do nc -l localhost 1500 -c \"egel serf.eg gopher\"; sleep 1 ; done"

    def start_www_server =
        OS::exec "while true ; do nc -l localhost 1500 -c \"egel serf.eg gopher\"; sleep 1 ; done"

    def start_servers = start_gopher_server #; start_www_server; none
)

namespace Serf (

    def serve_gopher_request = serve_selector ((OS::read_line OS::stdin) |> trim_crlf)

    def trim_crlf = do unpack |> break [C -> or (C == '\n') (C == '\r')] |> fst |> pack

    def serve_selector =
        [S -> 
            if Dict::has db S then
                let DOC = Dict::get db S in
                print (to_gopher DOC)
            else
                print (to_gopher unknown)]

    def to_gopher =
        let FAKE = "\tfake\t(NULL)\t0\r\n" in
        [{} -> "" |{X|XX} -> to_gopher X + to_gopher XX
        |(h0 S) -> "i# " + S + FAKE
        |(h1 S) -> "i## " + S + FAKE
        |(h2 S) -> "i### " +  S + FAKE
        |(par S) -> "i" + S + FAKE
        |(code S) -> "i" + S + FAKE
        |(link S T) -> S + "::" T ]
)

namespace Serf (

    def serve_www_request = "dummy"

)

namespace Serf (

    def debug = map [(K,V) -> print "selector: " K "\n"; print (to_txt V)] (Dict::to_list db); none

    def to_txt =
        [{} -> "" |{X|XX} -> to_txt X + "\n\n" + to_txt XX
        |(h0 S) -> "# " + S
        |(h1 S) -> "## " + S
        |(h2 S) -> "### " +  S
        |(par S) -> S
        |(code S) -> S
        |(link S T) -> S + "::" T ]
)

namespace Serf (
    data h0, h1, h2, par, code, link

    val db = Dict::from_list {
        ("", {h0 "The Egel Language", par "Be cool."})
    }

    val unknown = {h0 "Uhoh", par "You seem to be lost!"}
)
