#!/usr/local/bin/egel

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import "prelude.eg"
import "os.ego"
import "regex.ego"
import "dictionary.eg"

using System
using List

def main = Serf::start

namespace Serf (

    def start =
        if elem "help" args then print "Usage: serf.eg [help] [gopher|www|debug]\n"
        else if elem "gopher" args then serve_gopher_request
        else if elem "www" args then serve_www_request
        else if elem "debug" args then debug
        else start_servers

    def start_gopher_server =
        OS::exec "while true ; do nc -4 -l 192.168.2.7 1500 -c \"egel serf.eg gopher\"; sleep 1 ; done"

    def start_www_server =
        OS::exec "while true ; do nc -4 -l 192.168.2.7 1580 -c \"egel serf.eg www\"; sleep 1 ; done"

    def start_servers = start_gopher_server #; start_www_server; none
)

namespace Serf (

    def serve_gopher_request = serve_selector ((OS::read_line OS::stdin) |> trim_crlf |> trim_lead)

    def trim_crlf = do unpack |> break [C -> or (C == '\n') (C == '\r')] |> fst |> pack

    def trim_lead = [ S -> if String::starts_with "/" S then String::remove 0 1 S else S ]

    def serve_selector = do db_page |> to_gopher |> [T -> print T]

    def to_gopher =
        let FAKE = "\tfake\t(NULL)\t0\r\n" in
        [{} -> "" |{X|XX} -> to_gopher X + to_gopher XX
        |(h0 S) -> "i# " + S + FAKE
        |(h1 S) -> "i## " + S + FAKE
        |(h2 S) -> "i### " +  S + FAKE
        |(par S) -> "i" + S + FAKE
        |(code S) -> "i" + S + FAKE
        |(link S T) -> "1" + S + "\t/" + T + "\tegel.dev\t70\r\n"  ]
)

namespace Serf (


    def to_request = do unpack |> split_on ' ' |> [{V,U|_} -> (pack V, trim_lead (pack U))| _ -> none]

    def serve_www_request = serve_verb ((OS::read_line OS::stdin) |> trim_crlf |> to_request)

    def serve_verb =
	[("GET", URL) -> db_page URL |> to_html |> [T -> print T]
        |_ -> 43 ]

    def to_html =
        [{} -> "" |{X|XX} -> to_html X + "\n" + to_html XX
        |(h0 S) -> "<h1>" + S + "</h1>\n"
        |(h1 S) -> "<h2>" + S + "</h2>\n"
        |(h2 S) -> "<h3>" +  S + "</h3>\n"
        |(par S) -> "<p>" + S + "</p>\n"
        |(code S) -> "<pre><code>" + S + "</code></pre>\n"
        |(link S T) -> "<a href=\"/" + T + "\">" + T + "</a>\n" ]
)

namespace Serf (

    def debug = map [K -> print "selector: " K "\n"; print (to_txt (db_page K))] db_keys; none

    def to_txt =
        [{} -> "" |{X|XX} -> to_txt X + "\n" + to_txt XX
        |(h0 S) -> "# " + S + "\n"
        |(h1 S) -> "## " + S + "\n"
        |(h2 S) -> "### " +  S + "\n"
        |(par S) -> S + "\n"
        |(code S) -> S + "\n"
        |(link S T) -> "->" + S + "::" + T ]
)

namespace Serf (
    data h0, h1, h2, par, code, link

    val db = Dict::from_list db_pages

    def db_has = Dict::has db

    def db_get = Dict::get db

    def db_keys = Dict::keys db

    def db_subs = [K -> db_keys |> filter (String::starts_with K) 
                        |> filter [S -> and (S /= K) ((String::index_of "/" (String::remove 0 (String::length K + 1) S)) < 0)] ]

    def db_page = [K -> if db_has K then {db_get K | db_subs K |> map [K -> link K K]} else db_unknown]

    def db_pages =
    {
        ("", {h0 "The Egel Language", par "Be cool."}),
	("sub", par "this is sub"),
	("sub/sub", par "this is sub/sub")
    }

    def db_unknown = {h0 "Uhoh", par "You seem to be lost!"}
)
