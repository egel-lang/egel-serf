#!/usr/local/bin/egel

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import "prelude.eg"
import "os.ego"
import "regex.ego"
import "dictionary.eg"

using System
using List

def main = Serf::start

namespace Serf (

    def start =
        if elem "start" args then start_servers
        else if elem "gopher" args then serve_gopher_request
        else if elem "www" args then serve_www_request
        else if elem "debug" args then debug
        else print "Usage: serf.eg [start|gopher|www|debug]\n"

    def start_gopher_server =
        OS::exec "while true ; do nc -4 -l 192.168.2.7 1500 -c \"egel serf.eg gopher\"; sleep 1 ; done"

    def start_www_server =
        OS::exec "while true ; do nc -4 -l 192.168.2.7 1501 -c \"egel serf.eg www\"; sleep 1 ; done"

    def start_servers =
        let S0 = async [_ -> start_gopher_server] in
        let S1 = async [_ -> start_www_server] in 
            await S0; await S1
)

namespace Serf (

    def serve_gopher_request = serve_selector ((OS::read_line OS::stdin) |> trim_crlf |> trim_lead)

    def trim_crlf = do unpack |> break [C -> or (C == '\n') (C == '\r')] |> fst |> pack

    def trim_lead = [ S -> if String::starts_with "/" S then String::remove 0 1 S else S ]

    def split_lines = do Regex::matches (Regex::compile "[^\n]+")

    def serve_selector = do db_page |> to_gopher |> [T -> print T]

    def gopher_line =
        [S -> "i" + S + "\tfake\t(NULL)\t0\r\n"]

    def code_numbers =
        do  split_lines
            |> [LL -> zip_with (+) (map [N -> format "{:4}: " N] (from_to 1 (length LL + 1))) LL]

    def to_gopher =
        [{} -> "" |{X|XX} -> to_gopher X + to_gopher XX
        |(h0 S) ->   gopher_line ("# " + S)
        |(h1 S) ->   gopher_line ("## " + S)
        |(h2 S) ->   gopher_line ("### " +  S)
        |(line S) -> gopher_line S
        |hr       -> gopher_line ""
        |(code S) -> map gopher_line (code_numbers S) |> foldr (+) ""
        |(link S T) -> "1" + S + "\t/" + T + "\tegel.dev\t70\r\n"  ]
)

namespace Serf (

    def to_request = do unpack |> split_on ' ' |> [{V,U|_} -> (pack V, trim_lead (pack U))| _ -> none]

    def serve_www_request = serve_verb ((OS::read_line OS::stdin) |> trim_crlf |> to_request)

    def serve_verb =
        [("GET", URL) -> db_page URL |> to_html |> serve_page
        |_ -> db_unknown |> to_html |> serve_page ]

    def serve_page =
        [ T ->
             print "HTTP/1.1 200 OK\r\n";
             print "Content-Type: text/html\r\n\r\n";
          print_html T ]

    def print_html =
        [T ->
             print "<!DOCTYPE html>";
             print "<html dir=\"ltr\">\n";
             print html_header;
             print "<body><pre>" T "</pre></body>\n";
             print "</html>\n" ]

    def html_header = """
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>The Egel Language</title>
<style type="text/css">
a { text-decoration: none; } a:hover { text-decoration: underline; }
pre { overflow: auto; }
@media (prefers-color-scheme: dark) { body { background-color: #000; color: #bdbdbd; color-scheme: dark; } a { color: #56c8ff; } }
</style>
<meta content="width=device-width" name="viewport" />
</head>
"""

    def html_escape = do Regex::replace_all (Regex::compile "<") "&lt;"

    def to_html =
        [{} -> "" |{X|XX} -> to_html X + to_html XX
        |(h0 S) ->     "<h1>" + S + "</h1>\n"
        |(h1 S) ->     "    <b>" + S + "</b>\n"
        |(h2 S) ->     "    <i>" +  S + "</i>\n"
        |hr ->         "\n"
        |(line S) ->   "    " + S + "\n"
        |(code S) ->   "    <pre><code>" + (foldr [S0 S1 -> S0 + "\n" + S1] "" (code_numbers (html_escape S))) + "</code></pre>\n"
        |(link S T) -> "DIR <a href=\"/" + T + "\">" + S + "</a>\n" ]
)

namespace Serf (

    def debug = map [K -> print "selector: " K "\n"; print (to_txt (db_page K))] db_keys; none

    def to_txt =
        [{} -> "" |{X|XX} -> to_txt X + "\n" + to_txt XX
        |(h0 S)   -> "# " + S + "\n"
        |(h1 S)   -> "## " + S + "\n"
        |(h2 S)   -> "### " +  S + "\n"
        |hr       ->  "\n"
        |(line S) -> S + "\n"
        |(code S) -> S + "\n"
        |(link S T) -> "->" + S + "::" + T ]
)

namespace Serf (
    data h0, h1, h2, line, hr, code, link, action

    val db = Dict::from_list db_pages

    def db_has = Dict::has db

    def db_get = Dict::get db

    def db_keys = Dict::keys db

    def db_subs = [K -> 
        db_keys |> filter (String::starts_with K) 
                |> filter [S -> and (S /= K) 
                              ((String::index_of "/" (String::remove 0 (String::length K + 1) S)) < 0)] ]

    def db_page = [K -> 
        if db_has K then {h0 "The Egel Language", link "<- home" "", hr, db_get K |> do_action, hr 
                         | db_subs K |> map [K -> link K K]} 
        else db_unknown]

    def do_action = [{} -> {} | {X|XX} -> map do_action {X|XX} |(action F) -> F none|X -> X]

    def db_pages =
    {
        ("", {line "Egel is an untyped concurrent functional scripting language based on eager combinator rewriting",
              line "with a concise but remarkably powerful syntax."}),
        ("self", action [_ -> code (OS::read_all (OS::open_in "serf.eg"))])
    }

    def db_unknown = {h0 "Uhoh", line "You seem to be lost!"}
)
